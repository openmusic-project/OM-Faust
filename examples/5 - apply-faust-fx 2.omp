; OM File Header - Saved 2013/11/19 16:01:57
; (6.070009 :patc (om-make-point 10 10) (om-make-point 756 173) (om-make-point 993 795) "" 183 0 nil "2013/11/19 16:01:57")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "5 - apply-faust-fx 2" (quote ((om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 775 236) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 893 181) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (392.35 712.04 1159.6 1671.11 2310.49 3269.56 4164.7 5123.77 6146.78 7233.73 8064.92 8832.18 9407.63 9855.19 10174.88 10366.7 10622.45 10878.2 11133.96 11261.83 11389.71 11581.52 11645.46 11837.27 11965.15 12093.03 12156.97 12220.9 12284.84 12348.78 12412.72 12540.59 12604.53 12668.47 12860.28 12924.22 13052.1 13179.98 13499.67 13819.36 14266.92 14778.43 15289.93 15929.32 16504.76 17080.2 17783.52 18358.97 18806.53 19126.22 19509.85 19829.54 20213.17 20660.74 21172.24 21555.87 22067.38 22578.88 23090.39 23729.77 24497.03 25392.16 26287.29 26862.74 27182.43 27630.0 28333.32 29100.57 29803.89 30635.09 31338.41 32297.48 33000.8 33768.06 34343.5 34727.13 35302.57 35686.2 36069.83 36325.58 36581.34 36709.21 36901.03 37028.9 37220.72 37348.59 37412.53 37668.28 37860.1 38243.73 38563.42 38947.05 39330.68 39650.37 40097.93 40353.69 40801.25 41184.88 41632.45 42143.95 42719.4 43230.9 44062.1 44701.48 45404.8 46236.0 46811.44 47514.76 48090.2 48793.52 49560.78 50264.1 50967.42 51606.8 52374.06 52949.5 53588.88 54100.39 54611.89 55123.4 55507.03 56146.41 56530.04 57233.36 57680.92 58128.49 58576.06 58895.75 59471.19 60174.51 61069.64 62028.72 63115.66 63946.86 64522.3 65033.81 65545.31 65992.89 66440.46 66888.03 67207.71 67655.28 68102.85 68422.53 68678.28 68934.04 69253.73 69509.48 69637.36 69893.11 70148.86 70404.61 70788.24 71171.87 71683.39 72194.89 72834.26 73409.71 74113.03 74816.35 75647.54 76670.55 77693.56 78716.57 79803.53 80762.6 81529.85 82361.05 82695.2 83012.45 83520.05 84091.09 84789.04 85423.54 85931.13 86184.93 86692.53 86946.33 87200.13 87771.17 88024.97 88405.67 88722.92 88913.27 89230.52 89484.32 89865.01 90182.26 90753.31 91134.01 91641.6 92022.3 92466.45 92910.6 93418.19 93862.34 94369.94 94814.09 95448.58 96019.63 96717.58 97225.17 97732.77 98303.82 98874.86 99509.36 100080.41 100524.55 101032.15 101349.4 101857.0 102174.25 102681.84 103062.54 103379.79 103633.59 104141.19 104394.98 104648.78 104775.68 105029.48 105156.38 105410.18 105537.08 105727.43 105854.33 105917.78 106044.67 106235.02 106361.92 106425.37 106552.27 106615.72 106742.62 106932.97 107059.87 107313.67 107567.47 107821.27 108075.06 108328.86 108582.66 108709.56 108899.91 109090.26 109534.41 109724.75 109978.55 110168.9 110422.7 110549.6 110803.4 111247.55 111501.35 111755.14 111945.49 112262.74 112516.54 112770.34 112960.69 113151.04 113404.83 113595.18 113848.98 114229.68 114483.48 114864.18 115181.43 115498.67)) (quote (9.3 9.3 9.3 9.28 9.25 9.19 9.16 9.1 9.04 8.97 8.88 8.82 8.74 8.68 8.62 8.57 8.51 8.42 8.33 8.25 8.13 8.02 7.89 7.79 7.71 7.62 7.54 7.44 7.33 7.24 6.6 5.9 5.78 5.71 5.63 5.57 5.48 5.41 5.33 5.28 5.22 5.16 5.11 5.05 5.03 5.01 4.99 4.98 4.97 4.97 4.97 4.99 5.03 5.06 5.11 5.15 5.19 5.27 5.33 5.43 5.54 5.62 5.69 5.72 5.73 5.75 5.75 5.73 5.72 5.69 5.63 5.58 5.53 5.46 5.41 5.37 5.29 5.21 5.13 5.03 4.97 4.91 4.84 4.74 3.55 3.47 3.38 3.28 3.19 3.07 2.95 2.84 2.74 2.63 2.56 2.5 2.45 2.41 2.38 2.36 2.36 2.36 2.36 2.38 2.39 2.42 2.44 2.47 2.51 2.57 2.61 2.68 2.76 2.81 2.89 2.96 3.01 3.07 3.14 3.18 3.21 3.27 3.31 3.35 3.36 3.38 3.38 3.37 3.37 3.34 3.31 3.25 3.18 3.11 3.04 3.0 2.93 2.85 2.76 2.66 2.59 2.5 2.41 2.33 2.28 2.22 2.15 2.06 2.01 1.95 1.9 1.85 1.81 1.75 1.7 1.64 1.59 1.55 1.5 1.46 1.44 1.41 1.38 1.38 1.38 1.41 1.45 1.5 1.52 1.53 1.55 1.59 1.63 1.67 1.71 1.75 1.8 1.84 1.9 1.96 2.01 2.07 2.1 2.15 2.2 2.25 2.3 2.37 2.45 2.53 2.61 2.7 2.79 2.89 3.01 3.09 3.21 3.32 3.44 3.58 3.7 3.83 3.96 4.1 4.25 4.41 4.54 4.66 4.8 4.92 5.06 5.19 5.31 5.44 5.55 5.65 5.77 5.86 5.96 6.04 6.1 6.17 6.25 6.31 6.4 6.48 6.55 6.63 6.78 6.85 6.91 6.98 7.04 7.09 7.15 7.24 7.31 7.4 7.5 7.59 7.66 7.74 7.8 7.86 7.92 8.06 8.12 8.2 8.27 8.34 8.4 8.48 8.58 8.65 8.71 8.77 8.83 8.89 8.94 8.99 9.03 9.07 9.12 9.17 9.24 9.28 9.34 9.4 9.47)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1936 1148) (om-make-point 247 95) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 605 237) (om-make-point 27 30) 3 "3" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 429 167) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (241.97 297.43 352.89 426.83 491.53 537.74 593.2 648.65 713.35 796.54 851.99 925.94 999.88 1046.09 1083.06 1120.03 1138.52 1175.49 1193.97 1221.7 1258.67 1304.89 1341.86 1397.31 1434.29 1471.26 1508.23 1572.93 1628.38 1665.35 1720.81 1776.27 1831.72 1905.66 1961.12 1998.09 2044.31 2099.76 2136.73 2192.19 2247.65 2284.62 2330.83 2367.8 2404.77 2423.26 2460.23 2478.71 2534.17 2580.38 2608.11 2635.84 2645.08 2654.33 2663.57 2682.05 2691.3 2700.54 2709.78 2728.27 2737.51 2746.75 2765.24 2774.48 2783.72 2792.97 2802.21 2820.69 2829.94 2839.18 2866.91 2876.15 2885.39 2903.88 2922.36 2968.58 3005.55 3079.49 3134.95 3218.13 3273.59 3329.04 3384.5 3458.44 3504.66 3560.11 3634.05 3735.72 3837.39 3948.31 4059.22 4151.65 4262.56 4354.99 4428.93 4502.87 4558.33 4613.78 4650.75 4696.97 4761.67 4826.37 4891.07 4965.01 5020.46 5066.68 5131.38 5186.83 5233.05 5288.5 5334.72 5399.42 5445.63 5538.06 5593.51 5639.73 5704.42 5750.64 5796.85 5843.07 5898.52 5935.49 5990.95 6027.92 6064.89 6101.86 6157.32 6203.53 6249.75 6314.44 6360.66 6406.87 6453.09 6499.3 6545.51 6610.21 6693.4 6748.85 6813.55 6859.77 6905.98 6961.44 7016.89 7072.35 7127.8 7164.78 7210.99 7257.2 7312.66 7368.12 7451.3 7497.51 7543.73 7599.18 7654.64 7710.1 7765.55 7821.01 7876.47 7922.68 7968.89 8015.11 8107.53 8181.48 8255.42 8329.36 8384.82 8458.76 8514.21 8569.67 8634.37 8690.19 8726.83 8781.79 8836.74 8882.54 8937.5 8955.82 8983.3 9019.94 9047.42 9074.9 9093.22 9129.86 9166.5 9212.3 9248.93 9285.57 9322.21 9358.85 9395.49 9432.13 9487.09 9523.73 9578.69 9615.32 9661.12 9688.6 9725.24 9761.88 9798.52 9835.16 9862.64 9880.96 9908.44 9945.08 9963.4 10000.03 10045.83 10091.63 10128.27 10155.75 10201.55 10247.35 10293.15 10348.11 10375.58 10421.38 10458.02 10485.5 10512.98 10549.62 10558.78 10586.26 10604.58)) (quote (-0.97 -0.97 -0.96 -0.95 -0.94 -0.93 -0.92 -0.9 -0.88 -0.87 -0.84 -0.81 -0.77 -0.75 -0.73 -0.71 -0.69 -0.67 -0.65 -0.62 -0.59 -0.56 -0.53 -0.48 -0.44 -0.4 -0.35 -0.3 -0.25 -0.19 -0.14 -0.08 -0.02 0.05 0.11 0.16 0.21 0.27 0.32 0.38 0.43 0.47 0.52 0.56 0.59 0.62 0.64 0.66 0.66 0.64 0.62 0.59 0.57 0.55 0.51 0.49 0.45 0.43 0.4 0.37 0.34 0.29 0.26 0.22 0.2 0.17 0.12 0.09 0.07 0.04 0.01 -0.01 -0.04 -0.07 -0.09 -0.12 -0.14 -0.16 -0.17 -0.16 -0.15 -0.14 -0.13 -0.11 -0.1 -0.07 -0.05 -0.03 0.0 0.04 0.08 0.11 0.16 0.2 0.24 0.28 0.31 0.34 0.37 0.39 0.42 0.45 0.47 0.5 0.52 0.54 0.56 0.57 0.57 0.57 0.57 0.55 0.54 0.51 0.49 0.47 0.44 0.4 0.36 0.32 0.28 0.23 0.18 0.14 0.1 0.05 0.0 -0.05 -0.09 -0.12 -0.15 -0.18 -0.19 -0.2 -0.2 -0.19 -0.19 -0.19 -0.19 -0.19 -0.18 -0.18 -0.19 -0.2 -0.23 -0.25 -0.28 -0.31 -0.34 -0.37 -0.4 -0.43 -0.45 -0.48 -0.5 -0.52 -0.53 -0.53 -0.53 -0.53 -0.53 -0.52 -0.5 -0.48 -0.47 -0.45 -0.42 -0.41 -0.39 -0.37 -0.35 -0.35 -0.33 -0.32 -0.3 -0.28 -0.26 -0.25 -0.22 -0.2 -0.18 -0.16 -0.14 -0.11 -0.09 -0.06 -0.03 0.0 0.02 0.05 0.08 0.11 0.14 0.18 0.21 0.24 0.27 0.3 0.33 0.36 0.39 0.41 0.44 0.46 0.48 0.5 0.52 0.54 0.57 0.6 0.61 0.63 0.64 0.64 0.66 0.67 0.69 0.71 0.73 0.76 0.78 0.8 0.82 0.84 0.92)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1206 679) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 747 204) (om-make-point 66 30) "Speed" "\"Speed\"" nil) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 733 234) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 578 203) (om-make-point 84 30) "Feedback" "\"Feedback\"" nil) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 564 233) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 691 473) (om-make-point 149 30) "apply-faust-fx-tuto-2" "\"apply-faust-fx-tuto-2\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 653 521) nil nil nil nil 1) (om-load-boxcall (quote genfun) "APPLY-FAUST-FX" (quote apply-faust-fx) (quote ((om-load-inputfun (quote input-funbox) "A sound object" "S" nil) (om-load-inputfun (quote input-funbox) "A Faust-Fx" "EFFECT" nil) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-fx-out" nil))) (om-make-point 496 528) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 248 88) (quote "You can plug one automation directly to the method, or a list of automations without any limitation.") "" (om-make-point 682 378) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 506 627) (om-make-point 127 77) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 304 354) (om-make-point 127 77) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "FAUST-AUTOMATION 2" (quote faust-automation) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "a faust-fx/synth, or a list of a faust-fx/synth and a name of a parameter (e.g : (<faust-synth> \"freq\"))" "faust-control" nil))) (om-make-point 691 283) (om-make-point 143 64) (let ((rep (make-instance (quote faust-automation)))) (setf (c-action rep) nil (paramnum rep) (quote 3) (decimals rep) (quote 2) (x-points rep) (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.0 14300.0 14400.0 14500.0 14600.0 14700.0 14800.0 14900.0 15000.0 15100.0 15200.0 15300.0 15400.0 15500.0 15600.0 15700.0 15800.0 15900.0 16000.0 16100.0 16200.0 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0 16900.0 17000.0 17100.0 17200.0 17300.0 17400.0 17500.0 17600.0 17700.0 17800.0 17900.0 18000.0 18100.0 18200.0 18300.0 18400.0 18500.0 18600.0 18700.0 18800.0 18900.0 19000.0 19100.0 19200.0 19300.0 19400.0 19500.0 19600.0 19700.0 19800.0 19900.0 20000.0 20100.0 20200.0 20300.0 20400.0 20500.0 20600.0 20700.0 20800.0 20900.0)) (y-points rep) (quote (9.3 9.3 9.3 9.28 9.25 9.19 9.16 9.1 9.04 8.97 8.88 8.82 8.74 8.68 8.62 8.57 8.51 8.42 8.33 8.25 8.13 8.02 7.89 7.79 7.71 7.62 7.54 7.44 7.33 7.24 6.6 5.9 5.78 5.71 5.63 5.57 5.48 5.41 5.33 5.28 5.22 5.16 5.11 5.05 5.03 5.01 4.99 4.98 4.97 4.97 4.97 4.99 5.03 5.06 5.11 5.15 5.19 5.27 5.33 5.43 5.54 5.62 5.69 5.72 5.73 5.75 5.75 5.73 5.72 5.69 5.63 5.58 5.53 5.46 5.41 5.37 5.29 5.21 5.13 5.03 4.97 4.91 4.84 4.74 3.55 3.47 3.38 3.28 3.19 3.07 2.95 2.84 2.74 2.63 2.56 2.5 2.45 2.41 2.38 2.36 2.36 2.36 2.36 2.38 2.39 2.42 2.44 2.47 2.51 2.57 2.61 2.68 2.76 2.81 2.89 2.96 3.01 3.07 3.14 3.18 3.21 3.27 3.31 3.35 3.36 3.38 3.38 3.37 3.37 3.34 3.31 3.25 3.18 3.11 3.04 3.0 2.93 2.85 2.76 2.66 2.59 2.5 2.41 2.33 2.28 2.22 2.15 2.06 2.01 1.95 1.9 1.85 1.81 1.75 1.7 1.64 1.59 1.55 1.5 1.46 1.44 1.41 1.38 1.38 1.38 1.41 1.45 1.5 1.56 1.62 1.68 1.74 1.79 1.83 1.84 1.86 1.86 1.84 1.8 1.75 1.7 1.64 1.58 1.53 1.45 1.4 1.33 1.27 1.21 1.18 1.13 1.07 1.03 0.96 0.9 0.84 0.77 0.68 0.59 0.5 0.42 0.34 0.26 0.19 0.14 0.1 0.06 0.04 0.03 0.01)) (paraminfos rep) (quote ("Speed" 0.0 10.0 0.5)) (faustname rep) (quote "Faust-FX-3")) (push rep *faust-automations-to-fill*) rep) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom inport outport deltapict player)) (list nil (quote t) (om-make-point 1297 203) (om-make-point 1263 593) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 0 0 (om-make-point 0 0) (quote :bpfplayer))) t nil nil t) (om-load-editor-box1 "FAUST-AUTOMATION" (quote faust-automation) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "a faust-fx/synth, or a list of a faust-fx/synth and a name of a parameter (e.g : (<faust-synth> \"freq\"))" "faust-control" nil))) (om-make-point 521 280) (om-make-point 143 64) (let ((rep (make-instance (quote faust-automation)))) (setf (c-action rep) nil (paramnum rep) (quote 5) (decimals rep) (quote 3) (x-points rep) (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.0 14300.0 14400.0 14500.0 14600.0 14700.0 14800.0 14900.0 15000.0 15100.0 15200.0 15300.0 15400.0 15500.0 15600.0 15700.0 15800.0 15900.0 16000.0 16100.0 16200.0 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0 16900.0 17000.0 17100.0 17200.0 17300.0 17400.0 17500.0 17600.0 17700.0 17800.0 17900.0 18000.0 18100.0 18200.0 18300.0 18400.0 18500.0 18600.0 18700.0 18800.0 18900.0 19000.0 19100.0 19200.0 19300.0 19400.0 19500.0 19600.0 19700.0 19800.0 19900.0 20000.0 20100.0 20200.0 20300.0 20400.0 20500.0 20600.0 20700.0 20800.0 20900.0 21000.0 21100.0)) (y-points rep) (quote (-0.97 -0.97 -0.96 -0.95 -0.94 -0.93 -0.92 -0.9 -0.88 -0.87 -0.84 -0.81 -0.77 -0.75 -0.73 -0.71 -0.69 -0.67 -0.65 -0.62 -0.59 -0.56 -0.53 -0.48 -0.44 -0.4 -0.35 -0.3 -0.25 -0.19 -0.14 -0.08 -0.02 0.05 0.11 0.16 0.21 0.27 0.32 0.38 0.43 0.47 0.52 0.56 0.59 0.62 0.64 0.66 0.66 0.64 0.62 0.59 0.57 0.55 0.51 0.49 0.45 0.43 0.4 0.37 0.34 0.29 0.26 0.22 0.2 0.17 0.12 0.09 0.07 0.04 0.01 -0.01 -0.04 -0.07 -0.09 -0.12 -0.14 -0.16 -0.17 -0.16 -0.15 -0.14 -0.13 -0.11 -0.1 -0.07 -0.05 -0.03 0.0 0.04 0.08 0.11 0.16 0.2 0.24 0.28 0.31 0.34 0.37 0.39 0.42 0.45 0.47 0.5 0.52 0.54 0.56 0.57 0.57 0.57 0.57 0.55 0.54 0.51 0.49 0.47 0.44 0.4 0.36 0.32 0.28 0.23 0.18 0.14 0.1 0.05 0.0 -0.05 -0.09 -0.12 -0.15 -0.18 -0.19 -0.2 -0.2 -0.19 -0.19 -0.19 -0.19 -0.19 -0.18 -0.18 -0.19 -0.2 -0.23 -0.25 -0.28 -0.31 -0.34 -0.37 -0.4 -0.43 -0.45 -0.48 -0.5 -0.52 -0.53 -0.53 -0.53 -0.53 -0.53 -0.52 -0.5 -0.48 -0.47 -0.45 -0.42 -0.41 -0.39 -0.37 -0.35 -0.33 -0.31 -0.3 -0.29 -0.28 -0.27 -0.27 -0.26 -0.26 -0.26 -0.26 -0.27 -0.27 -0.26 -0.28 -0.3 -0.32 -0.34 -0.36 -0.38 -0.42 -0.44 -0.46 -0.48 -0.5 -0.54 -0.6 -0.63 -0.65 -0.67 -0.7 -0.73 -0.76 -0.78 -0.8 -0.82 -0.84 -0.86 -0.87 -0.87 -0.88)) (paraminfos rep) (quote ("Feedback" -0.999 0.999 0.0)) (faustname rep) (quote "Faust-FX-3")) (push rep *faust-automations-to-fill*) rep) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom inport outport deltapict player)) (list nil (quote t) (om-make-point 231 228) (om-make-point 1557 580) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 0 0 (om-make-point 0 0) (quote :bpfplayer))) t nil nil t) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 641 387) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 251 71) (quote "1) Load a sound by evaluating this sound box, then lock the box (press B).") "" (om-make-point 66 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 248 88) (quote "2) Evaluate this empty sound box : it will ask you for a path to save the result of the apply-faust-fx method. Then, hear the result.") "" (om-make-point 228 631) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 726 85) (quote "apply-faust-fx with automation curves") "" (om-make-point 152 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "FAUST-FX" (quote faust-fx) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "effect-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "effect-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the effect will be plugged (0 = no specific track)" "tracknum" 0))) (om-make-point 652 109) (om-make-point 206 79) (when (find-class (quote faust-fx) nil) (let ((rep (make-instance (quote faust-fx)))) (setf (effect-txt rep) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = flanger_demo;" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") (effect-name rep) (quote "Faust-FX-3") (tracknum rep) (quote 0)) (push rep *faust-effects-to-compile*) rep)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 927 90) (om-make-point 372 399) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 650 12) (om-make-point 180 80) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = flanger_demo;" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (quote ((20 0 5 0 nil 0) (4 0 5 1 nil 0) (20 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (13 0 10 0 nil 0) (16 0 10 1 nil 0) (9 0 10 2 nil 0) (10 0 12 0 nil 0) (1 2 14 2 nil 0) (0 0 14 3 nil 0) (5 0 14 4 nil 0) (3 2 15 2 nil 0) (2 0 15 3 nil 0) (7 0 15 4 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (21 0 20 1 nil 0))) nil 6.070009))