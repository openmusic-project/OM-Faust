; OM File Header - Saved 2013/11/19 16:02:43
; (6.070009 :patc (om-make-point 334 110) (om-make-point 957 22) (om-make-point 963 637) "" 183 0 nil "2013/11/19 16:02:43")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "6 - flatten-faust-synth" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 497 253) (om-make-point 119 30) "synth-synth.aiff" "\"synth-synth.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 479 283) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLATTEN-FAUST-SYNTH" (quote flatten-faust-synth) (quote ((om-load-inputfun (quote input-funbox) "A Faust-Synth" "SYNTH" nil) (om-load-inputfun (quote input-funbox) "A duration in seconds" "DURATION" 10) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-synth-out" nil))) (om-make-point 352 339) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 393 296) (om-make-point 34 30) 30 "30" nil) (om-load-boxcomment "comment 4" (om-make-point 223 87) (quote "Input 1 : A synth or a list of synth automations$$Input 2 : A duration in seconds (10sec by default)") "" (om-make-point 122 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 726 85) (quote "The flatten-faust-synth method allows you to save a Faust-synth in an audio file.") "" (om-make-point 158 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 391 38) (om-make-point 185 82) (load-buffer-textfile (quote ("import(\"oscillator.lib\");" "" "process=(_+oscrs_demo),(_+oscrs_demo);" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t) (om-load-editor-box1 "FAUST-SYNTH" (quote faust-synth) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "synth-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "synth-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the synth will be plugged (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a duration in seconds (default = 10 sec)" "duration" 10))) (om-make-point 358 156) (om-make-point 205 80) (let ((rep (make-instance (quote faust-synth)))) (setf (synth-txt rep) (load-buffer-textfile (quote ("import(\"oscillator.lib\");" "" "process=(_+oscrs_demo),(_+oscrs_demo);" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") (synth-name rep) (quote "Faust-Synth-2") (tracknum rep) (quote 0) (duration rep) (quote 10) (is-copy rep) (quote nil)) (push rep *faust-synths-to-compile*) rep) "x" nil (pairlis (quote (player scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :libaudiostream) nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 372 156) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 358 463) (om-make-point 191 78) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudiostream) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 248 88) (quote "Evaluate this empty sound box : it will ask you for a path to save the result of the flatten-faust-synth method. Then, hear the result.") "" (om-make-point 113 468) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (quote ((0 0 1 0 nil 0) (7 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0) (6 0 7 1 nil 0) (2 0 8 0 nil 0))) nil 6.070009))