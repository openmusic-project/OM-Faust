; OM File Header - Saved 2013/11/18 15:56:22
; (6.070006 :patc (om-make-point 334 60) (om-make-point 614 389) (om-make-point 1025 789) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "2 - faust-synth" (quote ((om-load-boxcomment "comment 5" (om-make-point 331 142) (quote "You can play the Faust-Synth as a sound object, by pressing Space or 'P' on it.$Double click on the Faust-Synth box to see and use the graphic user interface window. $You can also look at the SVG file.") "" (om-make-point 379 480) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 224 75) (quote "A duration in seconds$(optional : if you don't fill this slot, a default value of 10sec will be set)") "" (om-make-point 723 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 689 338) (om-make-point 34 30) 30 "30" nil) (om-load-editor-box1 "FAUST-SYNTH" (quote faust-synth) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "synth-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "synth-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the synth will be plugged (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a duration in seconds (default = 10 sec)" "duration" 10))) (om-make-point 381 395) (om-make-point 216 81) (let ((rep (make-instance (quote faust-synth)))) (setf (synth-txt rep) (load-buffer-textfile (quote ("declare name        \"osc\";" "declare version     \"1.0\";" "declare author      \"Grame\";" "declare license     \"BSD\";" "declare copyright   \"(c) GRAME 2006\";" "" "//-----------------------------------------------" "//          Sinusoidal Oscillator" "//-----------------------------------------------" "" "import(\"music.lib\");" "" "smooth(c)       = *(1-c) : +~*(c);" "vol             = hslider(\"volume (db)\", 0, -96, 0, 0.1) : db2linear : smooth(0.999) ;" "freq            = hslider(\"freq\", 1000, 0, 24000, 0.1);" "" "" "Sine         = (_+vgroup(\"Oscillator\", osc(freq) * vol));" "" "process = Sine,Sine;" "" "")) (quote textfile) "supersede" "list") (synth-name rep) (quote "Sine") (tracknum rep) (quote 2) (duration rep) (quote 30) (is-copy rep) (quote nil)) (push rep *faust-synths-to-compile*) rep) "x" nil (pairlis (quote (player scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :libaudiostream) nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 124 237) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-boxcomment "comment 3" (om-make-point 224 75) (quote "A track number to plug the synth $(optional : you can plug and unplug faust objects in the audio mixer)") "" (om-make-point 648 218) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 621 227) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 2" (om-make-point 197 53) (quote "A Textfile containing your Faust code ") "" (om-make-point 127 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 278 66) (quote "A name $(optional : if you don't fill this slot, a default name like faust-synth-X will be set)") "" (om-make-point 460 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 463 171) (om-make-point 55 30) "Sine" "\"Sine\"" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 132 149) (om-make-point 249 98) (load-buffer-textfile (quote ("declare name        \"osc\";" "declare version     \"1.0\";" "declare author      \"Grame\";" "declare license     \"BSD\";" "declare copyright   \"(c) GRAME 2006\";" "" "//-----------------------------------------------" "//          Sinusoidal Oscillator" "//-----------------------------------------------" "" "import(\"music.lib\");" "" "smooth(c)       = *(1-c) : +~*(c);" "vol             = hslider(\"volume (db)\", 0, -96, 0, 0.1) : db2linear : smooth(0.999) ;" "freq            = hslider(\"freq\", 1000, 0, 24000, 0.1);" "" "" "Sine         = (_+vgroup(\"Oscillator\", osc(freq) * vol));" "" "process = Sine,Sine;" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (quote ((9 0 3 1 nil 0) (8 0 3 2 nil 0) (5 0 3 3 nil 0) (2 0 3 4 nil 0))) nil 6.070006))
