; OM File Header - Saved 2013/11/18 15:56:22
; (6.070006 :patc (om-make-point 10 110) (om-make-point 444 85) (om-make-point 1476 942) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "3 - faust-automation" (quote ((om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 911 515) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10000) (om-load-inputfun (quote input-funbox) "step" "STEP" 50))) (om-make-point 805 457) nil nil "&" nil 1) (om-load-editor-box1 "FAUST-AUTOMATION 2" (quote faust-automation) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "a faust-fx/synth, or a list of a faust-fx/synth and a name of a parameter (e.g : (<faust-synth> \"freq\"))" "faust-control" nil))) (om-make-point 851 598) (om-make-point 168 77) (let ((rep (make-instance (quote faust-automation)))) (setf (c-action rep) nil (paramnum rep) (quote 3) (decimals rep) (quote 2) (x-points rep) (quote (0.0 50.0 100.0 150.0 200.0 250.0 300.0 350.0 400.0 450.0 500.0 550.0 600.0 650.0 700.0 750.0 800.0 850.0 900.0 950.0 1000.0 1050.0 1100.0 1150.0 1200.0 1250.0 1300.0 1350.0 1400.0 1450.0 1500.0 1550.0 1600.0 1650.0 1700.0 1750.0 1800.0 1850.0 1900.0 1950.0 2000.0 2050.0 2100.0 2150.0 2200.0 2250.0 2300.0 2350.0 2400.0 2450.0 2500.0 2550.0 2600.0 2650.0 2700.0 2750.0 2800.0 2850.0 2900.0 2950.0 3000.0 3050.0 3100.0 3150.0 3200.0 3250.0 3300.0 3350.0 3400.0 3450.0 3500.0 3550.0 3600.0 3650.0 3700.0 3750.0 3800.0 3850.0 3900.0 3950.0 4000.0 4050.0 4100.0 4150.0 4200.0 4250.0 4300.0 4350.0 4400.0 4450.0 4500.0 4550.0 4600.0 4650.0 4700.0 4750.0 4800.0 4850.0 4900.0 4950.0 5000.0 5050.0 5100.0 5150.0 5200.0 5250.0 5300.0 5350.0 5400.0 5450.0 5500.0 5550.0 5600.0 5650.0 5700.0 5750.0 5800.0 5850.0 5900.0 5950.0 6000.0 6050.0 6100.0 6150.0 6200.0 6250.0 6300.0 6350.0 6400.0 6450.0 6500.0 6550.0 6600.0 6650.0 6700.0 6750.0 6800.0 6850.0 6900.0 6950.0 7000.0 7050.0 7100.0 7150.0 7200.0 7250.0 7300.0 7350.0 7400.0 7450.0 7500.0 7550.0 7600.0 7650.0 7700.0 7750.0 7800.0 7850.0 7900.0 7950.0 8000.0 8050.0 8100.0 8150.0 8200.0 8250.0 8300.0 8350.0 8400.0 8450.0 8500.0 8550.0 8600.0 8650.0 8700.0 8750.0 8800.0 8850.0 8900.0 8950.0 9000.0 9050.0 9100.0 9150.0 9200.0 9250.0 9300.0 9350.0 9400.0 9450.0 9500.0 9550.0 9600.0 9650.0 9700.0 9750.0 9800.0 9850.0 9900.0 9950.0 10000.0)) (y-points rep) (quote (0.0 0.31 0.63 0.94 1.25 1.56 1.87 2.18 2.49 2.79 3.09 3.39 3.68 3.97 4.26 4.54 4.82 5.09 5.36 5.62 5.88 6.13 6.37 6.61 6.85 7.07 7.29 7.5 7.71 7.9 8.09 8.27 8.44 8.61 8.76 8.91 9.05 9.18 9.3 9.41 9.51 9.6 9.69 9.76 9.82 9.88 9.92 9.96 9.98 10.0 10.0 10.0 9.98 9.96 9.92 9.88 9.82 9.76 9.69 9.6 9.51 9.41 9.3 9.18 9.05 8.91 8.76 8.61 8.44 8.27 8.09 7.9 7.71 7.5 7.29 7.07 6.85 6.61 6.37 6.13 5.88 5.62 5.36 5.09 4.82 4.54 4.26 3.97 3.68 3.39 3.09 2.79 2.49 2.18 1.87 1.56 1.25 0.94 0.63 0.31 0.0 0.31 0.63 0.94 1.25 1.56 1.87 2.18 2.49 2.79 3.09 3.39 3.68 3.97 4.26 4.54 4.82 5.09 5.36 5.62 5.88 6.13 6.37 6.61 6.85 7.07 7.29 7.5 7.71 7.9 8.09 8.27 8.44 8.61 8.76 8.91 9.05 9.18 9.3 9.41 9.51 9.6 9.69 9.76 9.82 9.88 9.92 9.96 9.98 10.0 10.0 10.0 9.98 9.96 9.92 9.88 9.82 9.76 9.69 9.6 9.51 9.41 9.3 9.18 9.05 8.91 8.76 8.61 8.44 8.27 8.09 7.9 7.71 7.5 7.29 7.07 6.85 6.61 6.37 6.13 5.88 5.62 5.36 5.09 4.82 4.54 4.26 3.97 3.68 3.39 3.09 2.79 2.49 2.18 1.87 1.56 1.25 0.94 0.63 0.31 0.0)) (paraminfos rep) (quote ("Speed" 0.0 10.0 0.5)) (faustname rep) (quote "Phaser")) (push rep *faust-automations-to-fill*) rep) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom inport outport deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 1274 616) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 0 0 (om-make-point 0 0) (quote :bpfplayer))) t nil nil nil) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 951 552) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 4" (om-make-point 456 182) (quote "Select everything in this patch and press Space to play all objects.$$The Synth will play during it's duration (60sec). Since it's plugged on channel 5 as the \"Phaser\" FX, it will go through it.$$Automations will play for their duration (10sec both), modifying the parameters they control (synth frequency and phaser speed) according to their curves.$$You can see the FX an Synth sliders moving in the graphic user interface while automations are playing.$") "" (om-make-point 427 685) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 346 139) (quote "You can plug a single Faust-FX or Faust-Synth to the faust-control slot of the Faust-automation.$$When you evaluate the automation, a pop-up will ask you which parameter you want to control.") "" (om-make-point 46 413) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 346 139) (quote "You can plug a list to the faust-control slot of the Faust-automation containing :$$- A Faust-FX or Faust-Synth,$- A parameter name.$$If your parameter name is invalid, a pop-up will ask you which parameter you want to control.") "" (om-make-point 1025 405) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.070006 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) $  (* 10 (abs (sin (/ (* 2 pi x) 10000)))))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 894 441) nil (list (list 0.0D0 0.3141075907812829D0 0.6279051952931337D0 0.9410831331851431D0 1.2533323356430426D0 1.5643446504023087D0 1.873813145857246D0 2.181432413965425D0 2.486898871648548D0 2.789911060392293D0 3.090169943749474D0 3.3873792024529137D0 3.681245526846779D0 3.9714789063478056D0 4.257792915650726D0 4.5399049973954675D0 4.817536741017153D0 5.090414157503713D0 5.358267949789966D0 5.620833778521305D0 5.877852522924732D0 6.129070536529765D0 6.374239897486897D0 6.613118653236518D0 6.845471059286886D0 7.071067811865475D0 7.289686274214114D0 7.501110696304596D0 7.705132427757891D0 7.901550123756903D0 8.090169943749475D0 8.270805742745619D0 8.443279255020152D0 8.607420270039438D0 8.763066800438637D0 8.910065241883679D0 9.048270524660197D0 9.177546256839812D0 9.297764858882515D0 9.408807689542256D0 9.510565162951535D0 9.60293685676943D0 9.68583161128631D0 9.759167619387473D0 9.822872507286887D0 9.876883405951379D0 9.921147013144778D0 9.9556196460308D0 9.980267284282716D0 9.995065603657317D0 10.0D0 9.995065603657317D0 9.980267284282716D0 9.9556196460308D0 9.921147013144778D0 9.876883405951379D0 9.822872507286887D0 9.759167619387475D0 9.685831611286313D0 9.60293685676943D0 9.510565162951537D0 9.408807689542254D0 9.297764858882513D0 9.177546256839812D0 9.048270524660195D0 8.910065241883679D0 8.763066800438635D0 8.607420270039438D0 8.443279255020152D0 8.27080574274562D0 8.090169943749475D0 7.9015501237569055D0 7.705132427757892D0 7.501110696304597D0 7.289686274214114D0 7.0710678118654755D0 6.845471059286885D0 6.613118653236518D0 6.374239897486895D0 6.129070536529763D0 5.877852522924733D0 5.620833778521308D0 5.358267949789966D0 5.090414157503714D0 4.817536741017152D0 4.539904997395468D0 4.257792915650729D0 3.971478906347806D0 3.6812455268467814D0 3.3873792024529133D0 3.090169943749475D0 2.789911060392291D0 2.4868988716485525D0 2.1814324139654278D0 1.8738131458572503D0 1.5643446504023098D0 1.2533323356430453D0 0.9410831331851435D0 0.6279051952931358D0 0.31410759078128237D0 1.2246063538223773D-15 0.31410759078128437D0 0.6279051952931335D0 0.9410831331851455D0 1.2533323356430384D0 1.5643446504023073D0 1.8738131458572478D0 2.181432413965425D0 2.4868988716485503D0 2.789911060392293D0 3.090169943749469D0 3.387379202452911D0 3.6812455268467748D0 3.971478906347804D0 4.257792915650723D0 4.539904997395467D0 4.81753674101715D0 5.090414157503712D0 5.358267949789965D0 5.620833778521305D0 5.87785252292473D0 6.129070536529766D0 6.374239897486897D0 6.613118653236514D0 6.845471059286887D0 7.071067811865471D0 7.289686274214116D0 7.5011106963045915D0 7.705132427757894D0 7.901550123756904D0 8.090169943749473D0 8.270805742745616D0 8.443279255020153D0 8.607420270039438D0 8.763066800438637D0 8.910065241883679D0 9.048270524660193D0 9.17754625683981D0 9.29776485888251D0 9.408807689542254D0 9.510565162951535D0 9.60293685676943D0 9.685831611286309D0 9.759167619387475D0 9.822872507286887D0 9.876883405951377D0 9.921147013144778D0 9.9556196460308D0 9.980267284282716D0 9.995065603657315D0 10.0D0 9.995065603657317D0 9.980267284282716D0 9.9556196460308D0 9.921147013144779D0 9.876883405951379D0 9.822872507286887D0 9.759167619387477D0 9.68583161128631D0 9.60293685676943D0 9.510565162951537D0 9.408807689542256D0 9.297764858882517D0 9.177546256839812D0 9.048270524660197D0 8.910065241883679D0 8.763066800438639D0 8.607420270039434D0 8.44327925502015D0 8.270805742745619D0 8.090169943749477D0 7.901550123756906D0 7.705132427757896D0 7.5011106963046D0 7.289686274214116D0 7.071067811865477D0 6.84547105928689D0 6.613118653236523D0 6.374239897486897D0 6.129070536529765D0 5.877852522924734D0 5.620833778521309D0 5.358267949789964D0 5.090414157503712D0 4.817536741017161D0 4.539904997395469D0 4.25779291565073D0 3.9714789063478033D0 3.681245526846787D0 3.387379202452914D0 3.0901699437494763D0 2.7899110603922966D0 2.4868988716485534D0 2.181432413965424D0 1.873813145857247D0 1.5643446504023109D0 1.2533323356430466D0 0.941083133185149D0 0.6279051952931326D0 0.3141075907812836D0 2.4492127076447546D-15)) "l" nil) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 1045 332) (om-make-point 66 30) "Speed" "\"Speed\"" nil) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 984 425) nil nil nil nil 1) (om-load-editor-box1 "FAUST-AUTOMATION" (quote faust-automation) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "a faust-fx/synth, or a list of a faust-fx/synth and a name of a parameter (e.g : (<faust-synth> \"freq\"))" "faust-control" nil))) (om-make-point 384 408) (om-make-point 203 82) (let ((rep (make-instance (quote faust-automation)))) (setf (c-action rep) nil (paramnum rep) (quote 1) (decimals rep) (quote 0) (x-points rep) (quote (170 361 520 680 935 1158 1317 1381 1413 1477 1541 1700 1859 2019 2178 2242 2306 2338 2401 2561 2720 2880 3071 3262 3422 3581 3772 3932 4028 4123 4187 4219 4346 4474 4570 4665 4761 4825 4888 4920 4952 5048 5143 5207 5271 5367 5462 5494 5558 5686 5749 5909 6132 6291 6451 6514 6578 6610 6674 6738 6833 6929 7025 7152 7280 7407 7439 7535 7662 7758 7886 8077 8236 8396 8491 8587 8651 8778 8906 9097 9257 9416 9671 9830 9990 10117 10213)) (y-points rep) (quote (39 39 39 39 39 39 39 42 44 47 50 51 52 52 50 48 46 43 40 37 36 36 36 36 35 35 35 37 40 42 45 48 51 54 57 59 56 53 51 49 47 44 40 37 34 31 28 25 22 20 18 17 17 18 18 21 24 27 31 34 38 41 45 48 53 57 59 63 67 70 73 73 73 71 69 67 65 63 61 59 59 59 61 61 58 55 52)) (paraminfos rep) (quote ("Frequency" 1.0 88.0 49.0)) (faustname rep) (quote "Oscrs")) (push rep *faust-automations-to-fill*) rep) "x" nil (pairlis (quote (player deltapict outport inport zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list (quote :bpfplayer) (om-make-point 0 0) 0 0 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 1100 606) (om-make-point 44 40) (quote t) nil)) t nil nil t) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1005 195) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 894 195) (om-make-point 69 30) "Phaser" "\"Phaser\"" nil) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 681 157) (om-make-point 167 73) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = phaser2_demo;" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t) (om-load-editor-box1 "FAUST-FX" (quote faust-fx) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "effect-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "effect-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the effect will be plugged (0 = no specific track)" "tracknum" 0))) (om-make-point 796 284) (om-make-point 218 77) (when (find-class (quote faust-fx) nil) (let ((rep (make-instance (quote faust-fx)))) (setf (effect-txt rep) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = phaser2_demo;" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") (effect-name rep) (quote "Phaser") (tracknum rep) (quote 5)) (push rep *faust-effects-to-compile*) rep)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 496 399) (om-make-point 416 170) 0 1 (quote :normal) (quote t) nil)) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 346 139) (quote "This tutorial shows how to build and use automations . Here you can see 2 Faust-automations :$$- The synth automation, which was hand-drawn,$- The FX automation, which is built from a lisp function to get a precise curve.$$Remember that Faust-automations are playable objects.") "" (om-make-point 362 0) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 583 201) (om-make-point 34 30) 60 "60" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 536 198) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 450 197) (om-make-point 62 30) "Oscrs" "\"Oscrs\"" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 199 161) (om-make-point 185 82) (load-buffer-textfile (quote ("import(\"oscillator.lib\");" "" "process=(_+oscrs_demo),(_+oscrs_demo);" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t) (om-load-editor-box1 "FAUST-SYNTH" (quote faust-synth) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "synth-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "synth-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the synth will be plugged (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a duration in seconds (default = 10 sec)" "duration" 10))) (om-make-point 379 290) (om-make-point 217 79) (let ((rep (make-instance (quote faust-synth)))) (setf (synth-txt rep) (load-buffer-textfile (quote ("import(\"oscillator.lib\");" "" "process=(_+oscrs_demo),(_+oscrs_demo);" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") (synth-name rep) (quote "Oscrs") (tracknum rep) (quote 5) (duration rep) (quote 60) (is-copy rep) (quote nil)) (push rep *faust-synths-to-compile*) rep) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale player)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudiostream) 1 nil 1000 0 (om-make-point 372 156) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil (quote :libaudiostream))) nil nil nil t))) (quote ((7 0 0 0 nil 0) (1 0 0 1 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (3 0 2 3 nil 0) (9 0 2 4 nil 0) (14 0 9 0 nil 0) (8 0 9 1 nil 0) (20 0 10 4 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (11 0 14 3 nil 0) (19 0 20 1 nil 0) (18 0 20 2 nil 0) (17 0 20 3 nil 0) (16 0 20 4 nil 0))) nil 6.070006))
