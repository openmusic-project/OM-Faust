; OM File Header - Saved 2014/03/18 15:14:09
; (6.080004 :patc (om-make-point 226 110) (om-make-point 0 22) (om-make-point 1289 951) "" 183 0 nil "2014/03/18 15:14:09")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "7 - off-time rendering with class arrays" (quote ((om-load-boxcomment "comment 2" (om-make-point 518 395) (quote "To make this patch, after building Faust objects as explained in previous tutorials, follow these steps :$$1) Make BPFs that you want to use to automate FAUST parameters,$$2) Make a CLASS-ARRAY,$$3) Add as many keywords to your CLASS-ARRAY (by selecting it and pressing 'k') as automations you want,$$4) Clic on each keyword button created and change it's name to a parameter name (ie. change :k0 to :shift ...). If you write a wrong name, a pop-up will finally give you the choice between all available parameters,$$5) Link your BPFs to each keyword (as you can see, it's linked through list so the array can display curves. If you do not list BPFs, it will work but won't be displayed),$$6) Link the CLASS-ARRAY to the :auto-array keyword of the used method,$$7) Eventually set the :auto-rescale keyword of the method to a non-nil value to rescale the BPFs to the length of orignal sound/duration of synth (can be a list of boolean to rescale only specifics automations).$$8) Evaluate the output sound.") "" (om-make-point 380 538) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 360 67) (quote "This tutorial shows you how to use the flatten-faust-synth and apply-faust-fx methods with BPFs and CLASS-ARRAYs instead of FAUST-AUTOMATIONs.") "" (om-make-point 884 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOUND 3" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 917 624) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 589 394) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 52 778) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 295 290) (om-make-point 84 92) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85 5.85 8.84 14.84 19.84 24.84 30.84 36.83 39.83 44.83 47.83 50.83 53.83 56.83 59.82 61.82 63.82 66.82 69.82 73.82 78.82 81.82 84.81 86.81 90.81 92.81 96.81 99.81 102.81 106.81 109.8 112.8 116.8 121.8 125.8 129.8 132.8 135.79 138.79 142.79 146.79 149.79 151.79 154.79 156.79 158.78 160.78 163.78 167.78 172.78 176.78 179.78 183.77 187.77 191.77 196.77 199.77 204.77 209.76 214.76 219.76 223.76 226.76 229.76 231.76 236.75 239.75 241.75 243.75 246.75 247.75 252.75 254.75 255.75 256.75 257.75 258.75 263.74 270.74 279.74 291.73 302.73 313.72 325.72 338.71 348.71 363.7 370.7 380.7 387.69 392.69 397.69 409.69 417.68 428.68 442.67 456.67 466.66 470.66 473.66 478.66 489.65 504.65 514.64 522.64 528.64 534.64 535.64 539.63 540.63 542.63 546.63 549.63 554.63 555.63 556.63 557.63 567.62 584.62 605.61 626.6 658.59 678.58 694.57 703.57 711.57 717.56 720.56 724.56 728.56 735.56 744.55 750.55 754.55 757.55 760.55 763.54 765.54 766.54 768.54 770.54 772.54 774.54 775.54 777.54 780.54 781.54 782.54 784.54 787.54 790.53 796.53 798.53 800.53)) (quote (1.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 17.0 18.0 19.0 20.0 22.0 23.0 24.0 25.0 28.0 30.0 32.0 33.0 34.0 35.0 36.0 38.0 39.0 40.0 42.0 43.0 44.0 45.0 46.0 48.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 66.0 68.0 70.0 71.0 72.0 75.0 77.0 79.0 80.0 81.0 83.0 86.0 87.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 5.0 4.0 51.0 2.0 4.0 5.0 8.0 10.0 13.0 16.0 19.0 22.0 24.0 27.0 29.0 32.0 34.0 36.0 38.0 43.0 47.0 52.0 57.0 62.0 66.0 68.0 69.0 71.0 75.0 81.0 85.0 88.0 90.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 2.0 22.0 4.0 6.0 10.0 16.0 23.0 36.0 45.0 54.0 60.0 64.0 68.0 69.0 71.0 72.0 75.0 78.0 80.0 83.0 85.0 87.0 88.0 89.0 90.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 95.0 90.0 83.0 71.0 63.0 45.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 1003 428) (om-make-point 129 30) "fx-auto-array.aiff" "\"fx-auto-array.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE 2" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 1043 458) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 920 474) (om-make-point 51 30) (list (quote t) nil) "(t nil)" nil) (om-load-boxcall (quote genfun) "APPLY-FAUST-FX" (quote apply-faust-fx) (quote ((om-load-inputfun (quote input-funbox) "A sound object" "S" nil) (om-load-inputfun (quote input-funbox) "A Faust-Fx or a list of Faust-Automation" "EFFECT" nil) (om-load-inputkeyword (quote input-keyword) "A class-array containing BPFs with parameter names (used to build automations)" "auto-array" (quote :auto-array) nil nil) (om-load-inputkeyword (quote input-keyword) "A boolean to know if the automations need to be rescaled to the sound length" "auto-rescale" (quote :auto-rescale) nil nil) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-fx-out" nil))) (om-make-point 865 514) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 12" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1095 261) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 11" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1053 261) nil nil nil nil 1) (om-load-editor-box1 "CLASS-ARRAY 2" (quote class-array) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote control-keyword) "" "shift" (quote :shift) nil nil) (om-load-inputkeyword (quote control-keyword) "" "xfade" (quote :xfade) nil nil))) (om-make-point 938 309) (om-make-point 208 112) (if (find-class (quote class-array) nil) (let ((array (make-instance (quote class-array) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (lcontrols array) (list (list (quote :k0) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9 10.9 19.8 28.7 34.1 43.1 52.0 60.9 69.9 78.8 87.8 96.7 100.3 105.7 114.6 123.5 132.5 139.6 148.6 157.5 164.7 173.6 179.0 187.9 195.1 200.4 207.6 214.8 218.3 221.9 223.7 227.3 229.1 232.6 236.2 243.4 252.3 257.7 268.4 273.8 280.9 289.9 302.4 314.9 325.6 334.6 343.5 352.5 356.0 365.0 373.9 382.9 393.6 402.6 411.5 425.8 434.7 445.5 454.4 463.4 479.5 490.2 504.5 518.8 529.5 538.5 547.4 556.4 565.3 572.5 579.6 583.2 586.8 590.4 595.7 597.5 601.1 604.7 608.2 615.4 620.8 627.9 644.0 661.9 678.0 688.7 701.2 713.8 722.7 735.2 742.4 749.5 753.1 758.5 763.8 765.6 769.2 771.0 772.8 776.4 779.9 783.5 787.1 790.7 797.8 806.8 812.1 822.9 831.8 842.5 853.3 862.2 872.9 883.7 892.6 899.8 903.3 905.1 906.9 908.7 910.5 912.3 915.9 917.7 919.4 921.2 923.0 924.8 926.6 930.2 932.0 935.5 937.3 940.9 944.5 948.1 955.2 960.6 965.9 969.5 978.5 983.8)) (quote (0.0 0.2 0.3 0.4 0.6 0.7 0.9 1.0 1.2 1.3 1.5 1.6 1.7 1.9 2.1 2.3 2.4 2.6 2.7 2.9 3.1 3.4 3.8 4.1 4.4 4.6 5.0 5.3 5.6 5.9 6.2 6.5 6.7 6.9 7.1 7.4 7.7 7.9 8.3 8.5 8.8 9.1 9.4 9.5 9.6 9.6 9.6 9.4 9.2 9.1 8.9 8.8 8.7 8.7 8.7 9.0 9.2 9.4 9.5 9.8 10.1 10.2 10.3 10.5 10.7 10.7 10.7 10.5 10.3 10.0 9.7 9.5 9.2 8.9 8.7 8.5 8.0 7.5 7.1 6.8 6.4 6.1 5.7 5.4 5.3 5.3 5.5 5.8 6.0 6.3 6.6 6.9 7.2 7.5 7.9 8.1 8.4 8.8 9.0 9.2 9.5 9.7 9.9 10.2 10.5 10.7 10.9 11.2 11.3 11.5 11.5 11.5 11.4 11.1 10.9 10.6 10.4 10.1 9.8 9.3 8.3 7.7 7.3 5.1 4.6 4.2 3.9 3.7 3.4 3.2 2.9 2.6 2.4 2.1 1.8 1.5 1.2 0.9 0.7 0.5 0.3 0.1)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :k1) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9 16 24 34 41 48 56 67 81 91 104 115 125 133 147 158 166 173 182 192 200 208 219 228 236 247 256 265 278 285 292 299 314 325 334 348 360 373 385 392 405 419 431 441 448 458 470 479 487 498 511 522 543 557 564 579 589 599 606 614 621 628 635 640 645 649 656 661 667 672 677 682 689 693 698 700 703 704 710 714 718 724 727 731 735 738 744 745 746 748 749 750 753 755 756 759 762 766 767 770 774 777 781 784 790 794 796 801 805 809 813 817 823 829 834 840 847 854 861 866 872 884 894 901 909 915 921 928 936 947 958 971 983 992 1001 1008 1026 1040 1053 1063 1077 1091 1105 1120 1137 1151 1170 1184 1197 1208 1217 1226 1240 1251 1261 1269 1279 1290 1300 1315 1322 1329 1337 1344 1353 1361 1368 1375 1383 1390 1397 1404 1411 1424 1435 1443 1452 1461 1468 1478 1485)) (quote (1 3 3 4 6 7 10 15 18 21 24 27 29 30 35 40 41 44 47 52 53 57 63 64 67 72 77 78 81 83 86 87 93 100 103 110 120 127 135 140 150 160 170 176 183 193 206 212 220 230 246 261 287 300 309 329 339 353 367 381 396 413 429 444 459 475 489 503 519 538 556 573 590 606 621 633 647 661 676 695 713 730 742 755 772 790 812 824 839 853 873 922 915 905 896 887 876 865 855 844 829 815 799 784 769 756 742 729 715 699 686 670 656 642 627 615 604 590 579 569 559 542 529 519 510 501 492 481 469 455 438 419 398 384 370 363 338 323 303 287 272 255 240 221 204 190 175 164 153 146 140 133 123 113 106 101 97 89 81 73 70 69 64 63 61 58 57 53 52 50 49 47 46 43 38 35 33 30 27 24 23)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9 10.9 19.8 28.7 34.1 43.1 52.0 60.9 69.9 78.8 87.8 96.7 100.3 105.7 114.6 123.5 132.5 139.6 148.6 157.5 164.7 173.6 179.0 187.9 195.1 200.4 207.6 214.8 218.3 221.9 223.7 227.3 229.1 232.6 236.2 243.4 252.3 257.7 268.4 273.8 280.9 289.9 302.4 314.9 325.6 334.6 343.5 352.5 356.0 365.0 373.9 382.9 393.6 402.6 411.5 425.8 434.7 445.5 454.4 463.4 479.5 490.2 504.5 518.8 529.5 538.5 547.4 556.4 565.3 572.5 579.6 583.2 586.8 590.4 595.7 597.5 601.1 604.7 608.2 615.4 620.8 627.9 644.0 661.9 678.0 688.7 701.2 713.8 722.7 735.2 742.4 749.5 753.1 758.5 763.8 765.6 769.2 771.0 772.8 776.4 779.9 783.5 787.1 790.7 797.8 806.8 812.1 822.9 831.8 842.5 853.3 862.2 872.9 883.7 892.6 899.8 903.3 905.1 906.9 908.7 910.5 912.3 915.9 917.7 919.4 921.2 923.0 924.8 926.6 930.2 932.0 935.5 937.3 940.9 944.5 948.1 955.2 960.6 965.9 969.5 978.5 983.8)) (quote (0.0 0.2 0.3 0.4 0.6 0.7 0.9 1.0 1.2 1.3 1.5 1.6 1.7 1.9 2.1 2.3 2.4 2.6 2.7 2.9 3.1 3.4 3.8 4.1 4.4 4.6 5.0 5.3 5.6 5.9 6.2 6.5 6.7 6.9 7.1 7.4 7.7 7.9 8.3 8.5 8.8 9.1 9.4 9.5 9.6 9.6 9.6 9.4 9.2 9.1 8.9 8.8 8.7 8.7 8.7 9.0 9.2 9.4 9.5 9.8 10.1 10.2 10.3 10.5 10.7 10.7 10.7 10.5 10.3 10.0 9.7 9.5 9.2 8.9 8.7 8.5 8.0 7.5 7.1 6.8 6.4 6.1 5.7 5.4 5.3 5.3 5.5 5.8 6.0 6.3 6.6 6.9 7.2 7.5 7.9 8.1 8.4 8.8 9.0 9.2 9.5 9.7 9.9 10.2 10.5 10.7 10.9 11.2 11.3 11.5 11.5 11.5 11.4 11.1 10.9 10.6 10.4 10.1 9.8 9.3 8.3 7.7 7.3 5.1 4.6 4.2 3.9 3.7 3.4 3.2 2.9 2.6 2.4 2.1 1.8 1.5 1.2 0.9 0.7 0.5 0.3 0.1)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9 16 24 34 41 48 56 67 81 91 104 115 125 133 147 158 166 173 182 192 200 208 219 228 236 247 256 265 278 285 292 299 314 325 334 348 360 373 385 392 405 419 431 441 448 458 470 479 487 498 511 522 543 557 564 579 589 599 606 614 621 628 635 640 645 649 656 661 667 672 677 682 689 693 698 700 703 704 710 714 718 724 727 731 735 738 744 745 746 748 749 750 753 755 756 759 762 766 767 770 774 777 781 784 790 794 796 801 805 809 813 817 823 829 834 840 847 854 861 866 872 884 894 901 909 915 921 928 936 947 958 971 983 992 1001 1008 1026 1040 1053 1063 1077 1091 1105 1120 1137 1151 1170 1184 1197 1208 1217 1226 1240 1251 1261 1269 1279 1290 1300 1315 1322 1329 1337 1344 1353 1361 1368 1375 1383 1390 1397 1404 1411 1424 1435 1443 1452 1461 1468 1478 1485)) (quote (1 3 3 4 6 7 10 15 18 21 24 27 29 30 35 40 41 44 47 52 53 57 63 64 67 72 77 78 81 83 86 87 93 100 103 110 120 127 135 140 150 160 170 176 183 193 206 212 220 230 246 261 287 300 309 329 339 353 367 381 396 413 429 444 459 475 489 503 519 538 556 573 590 606 621 633 647 661 676 695 713 730 742 755 772 790 812 824 839 853 873 922 915 905 896 887 876 865 855 844 829 815 799 784 769 756 742 729 715 699 686 670 656 642 627 615 604 590 579 569 559 542 529 519 510 501 492 481 469 455 438 419 398 384 370 363 338 323 303 287 272 255 240 221 204 190 175 164 153 146 140 133 123 113 106 101 97 89 81 73 70 69 64 63 61 58 57 53 52 50 49 47 46 43 38 35 33 30 27 24 23)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t))) (list "All close" (list 0 nil) (list 1 nil))))) t nil nil nil) (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 226 577) (om-make-point 149 30) "synth-auto-array.aiff" "\"synth-auto-array.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 276 607) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 218 603) (om-make-point 38 30) 0.3 "0.3" nil) (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 177 580) (om-make-point 24 30) (quote t) "t" nil) (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 35 590) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote genfun) "FLATTEN-FAUST-SYNTH" (quote flatten-faust-synth) (quote ((om-load-inputfun (quote input-funbox) "A Faust-Synth" "SYNTH" nil) (om-load-inputfun (quote input-funbox) "A duration in seconds" "DURATION" 10) (om-load-inputkeyword (quote input-keyword) "A class-array containing BPFs with parameter names (used to build automations)" "auto-array" (quote :auto-array) nil nil) (om-load-inputkeyword (quote input-keyword) "A boolean to know if the automations need to be rescaled to the choosen duration" "auto-rescale" (quote :auto-rescale) nil nil) (om-load-inputkeyword (quote input-keyword) "A gain factor between 0 and 1" "gain" (quote :gain) 1.0 nil) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-synth-out" nil))) (om-make-point 18 664) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 7" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 210 396) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 297 393) nil nil nil nil 1) (om-load-editor-box1 "CLASS-ARRAY" (quote class-array) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote control-keyword) "" "cyclic" (quote :cyclic) nil nil) (om-load-inputkeyword (quote control-keyword) "" "period" (quote :period) nil nil))) (om-make-point 118 456) (om-make-point 209 115) (if (find-class (quote class-array) nil) (let ((array (make-instance (quote class-array) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (lcontrols array) (list (list (quote :cyclic) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.99 6.44 11.27 15.41 18.86 21.62 24.38 27.14 29.9 32.67 34.74 36.81 37.5 38.19 39.57 40.26 40.95 43.02 45.09 51.3 54.75 58.2 63.03 69.25 74.77 79.6 87.19 92.02 96.16 99.62 103.76 106.52 107.9 108.59 109.28 110.66 111.35 113.42 114.8 116.87 120.32 123.08 127.22 132.06 136.2 142.41 150.0 154.83 160.35 167.26 172.78 179.68 186.58 193.48 197.63 201.77 203.84 204.53 205.22 205.91 207.98 210.05 214.19 216.26 220.4 225.23 229.37 234.9 238.35 242.49 246.63 254.22 264.58 275.62 286.66 291.49 295.63 299.09 301.85 305.3 307.37 311.51 315.65 321.17 328.07 337.05 345.33 353.61 360.51 368.8 376.39 388.12 400.55 405.38 408.83 410.9 413.66 414.35 415.04 415.73 417.8 419.18 420.56 422.63 425.39 429.54 432.3 435.06 439.2 443.34 446.79 450.93 455.07 457.83 460.59 463.36 464.74 466.81 468.19 471.64 475.78 481.3 485.44 490.27 494.41 497.87 502.01 507.53 512.36 517.19 522.02 528.24 531.0 533.76 537.9 539.28 540.66 543.42 545.49 548.25 549.63 551.01 554.46 557.22 561.37 566.89 573.1 577.93 582.76 587.59 591.73 594.5 598.64 603.47 606.23 609.68 613.13 617.27 621.41 624.17 626.93 630.39 631.08 632.46)) (quote (0.0 0.01 0.02 0.03 0.04 0.06 0.07 0.09 0.11 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.2 0.19 0.18 0.17 0.16 0.16 0.16 0.17 0.19 0.21 0.23 0.27 0.3 0.33 0.35 0.39 0.42 0.43 0.45 0.46 0.44 0.43 0.42 0.41 0.39 0.39 0.38 0.38 0.37 0.38 0.4 0.42 0.44 0.46 0.49 0.51 0.54 0.58 0.62 0.64 0.67 0.69 0.7 0.66 0.64 0.63 0.61 0.6 0.59 0.59 0.59 0.58 0.58 0.58 0.59 0.6 0.62 0.66 0.71 0.77 0.8 0.82 0.84 0.85 0.84 0.83 0.81 0.8 0.79 0.79 0.79 0.79 0.81 0.82 0.84 0.86 0.9 0.95 0.98 0.99 1.0 0.99 0.96 0.93 0.9 0.85 0.81 0.77 0.71 0.68 0.64 0.63 0.61 0.6 0.6 0.61 0.62 0.63 0.64 0.66 0.68 0.7 0.66 0.63 0.56 0.52 0.47 0.44 0.42 0.41 0.4 0.39 0.39 0.39 0.4 0.41 0.42 0.43 0.44 0.44 0.42 0.41 0.38 0.35 0.31 0.29 0.27 0.25 0.23 0.22 0.2 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.09 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (list (quote :period) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85 5.85 8.84 14.84 19.84 24.84 30.84 36.83 39.83 44.83 47.83 50.83 53.83 56.83 59.82 61.82 63.82 66.82 69.82 73.82 78.82 81.82 84.81 86.81 90.81 92.81 96.81 99.81 102.81 106.81 109.8 112.8 116.8 121.8 125.8 129.8 132.8 135.79 138.79 142.79 146.79 149.79 151.79 154.79 156.79 158.78 160.78 163.78 167.78 172.78 176.78 179.78 183.77 187.77 191.77 196.77 199.77 204.77 209.76 214.76 219.76 223.76 226.76 229.76 231.76 236.75 239.75 241.75 243.75 246.75 247.75 252.75 254.75 255.75 256.75 257.75 258.75 263.74 270.74 279.74 291.73 302.73 313.72 325.72 338.71 348.71 363.7 370.7 380.7 387.69 392.69 397.69 409.69 417.68 428.68 442.67 456.67 466.66 470.66 473.66 478.66 489.65 504.65 514.64 522.64 528.64 534.64 535.64 539.63 540.63 542.63 546.63 549.63 554.63 555.63 556.63 557.63 567.62 584.62 605.61 626.6 658.59 678.58 694.57 703.57 711.57 717.56 720.56 724.56 728.56 735.56 744.55 750.55 754.55 757.55 760.55 763.54 765.54 766.54 768.54 770.54 772.54 774.54 775.54 777.54 780.54 781.54 782.54 784.54 787.54 790.53 796.53 798.53 800.53)) (quote (1.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 17.0 18.0 19.0 20.0 22.0 23.0 24.0 25.0 28.0 30.0 32.0 33.0 34.0 35.0 36.0 38.0 39.0 40.0 42.0 43.0 44.0 45.0 46.0 48.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 66.0 68.0 70.0 71.0 72.0 75.0 77.0 79.0 80.0 81.0 83.0 86.0 87.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 5.0 4.0 51.0 2.0 4.0 5.0 8.0 10.0 13.0 16.0 19.0 22.0 24.0 27.0 29.0 32.0 34.0 36.0 38.0 43.0 47.0 52.0 57.0 62.0 66.0 68.0 69.0 71.0 75.0 81.0 85.0 88.0 90.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 2.0 22.0 4.0 6.0 10.0 16.0 23.0 36.0 45.0 54.0 60.0 64.0 68.0 69.0 71.0 72.0 75.0 78.0 80.0 83.0 85.0 87.0 88.0 89.0 90.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 95.0 90.0 83.0 71.0 63.0 45.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (setf (data array) (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.99 6.44 11.27 15.41 18.86 21.62 24.38 27.14 29.9 32.67 34.74 36.81 37.5 38.19 39.57 40.26 40.95 43.02 45.09 51.3 54.75 58.2 63.03 69.25 74.77 79.6 87.19 92.02 96.16 99.62 103.76 106.52 107.9 108.59 109.28 110.66 111.35 113.42 114.8 116.87 120.32 123.08 127.22 132.06 136.2 142.41 150.0 154.83 160.35 167.26 172.78 179.68 186.58 193.48 197.63 201.77 203.84 204.53 205.22 205.91 207.98 210.05 214.19 216.26 220.4 225.23 229.37 234.9 238.35 242.49 246.63 254.22 264.58 275.62 286.66 291.49 295.63 299.09 301.85 305.3 307.37 311.51 315.65 321.17 328.07 337.05 345.33 353.61 360.51 368.8 376.39 388.12 400.55 405.38 408.83 410.9 413.66 414.35 415.04 415.73 417.8 419.18 420.56 422.63 425.39 429.54 432.3 435.06 439.2 443.34 446.79 450.93 455.07 457.83 460.59 463.36 464.74 466.81 468.19 471.64 475.78 481.3 485.44 490.27 494.41 497.87 502.01 507.53 512.36 517.19 522.02 528.24 531.0 533.76 537.9 539.28 540.66 543.42 545.49 548.25 549.63 551.01 554.46 557.22 561.37 566.89 573.1 577.93 582.76 587.59 591.73 594.5 598.64 603.47 606.23 609.68 613.13 617.27 621.41 624.17 626.93 630.39 631.08 632.46)) (quote (0.0 0.01 0.02 0.03 0.04 0.06 0.07 0.09 0.11 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.2 0.19 0.18 0.17 0.16 0.16 0.16 0.17 0.19 0.21 0.23 0.27 0.3 0.33 0.35 0.39 0.42 0.43 0.45 0.46 0.44 0.43 0.42 0.41 0.39 0.39 0.38 0.38 0.37 0.38 0.4 0.42 0.44 0.46 0.49 0.51 0.54 0.58 0.62 0.64 0.67 0.69 0.7 0.66 0.64 0.63 0.61 0.6 0.59 0.59 0.59 0.58 0.58 0.58 0.59 0.6 0.62 0.66 0.71 0.77 0.8 0.82 0.84 0.85 0.84 0.83 0.81 0.8 0.79 0.79 0.79 0.79 0.81 0.82 0.84 0.86 0.9 0.95 0.98 0.99 1.0 0.99 0.96 0.93 0.9 0.85 0.81 0.77 0.71 0.68 0.64 0.63 0.61 0.6 0.6 0.61 0.62 0.63 0.64 0.66 0.68 0.7 0.66 0.63 0.56 0.52 0.47 0.44 0.42 0.41 0.4 0.39 0.39 0.39 0.4 0.41 0.42 0.43 0.44 0.44 0.42 0.41 0.38 0.35 0.31 0.29 0.27 0.25 0.23 0.22 0.2 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.09 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85 5.85 8.84 14.84 19.84 24.84 30.84 36.83 39.83 44.83 47.83 50.83 53.83 56.83 59.82 61.82 63.82 66.82 69.82 73.82 78.82 81.82 84.81 86.81 90.81 92.81 96.81 99.81 102.81 106.81 109.8 112.8 116.8 121.8 125.8 129.8 132.8 135.79 138.79 142.79 146.79 149.79 151.79 154.79 156.79 158.78 160.78 163.78 167.78 172.78 176.78 179.78 183.77 187.77 191.77 196.77 199.77 204.77 209.76 214.76 219.76 223.76 226.76 229.76 231.76 236.75 239.75 241.75 243.75 246.75 247.75 252.75 254.75 255.75 256.75 257.75 258.75 263.74 270.74 279.74 291.73 302.73 313.72 325.72 338.71 348.71 363.7 370.7 380.7 387.69 392.69 397.69 409.69 417.68 428.68 442.67 456.67 466.66 470.66 473.66 478.66 489.65 504.65 514.64 522.64 528.64 534.64 535.64 539.63 540.63 542.63 546.63 549.63 554.63 555.63 556.63 557.63 567.62 584.62 605.61 626.6 658.59 678.58 694.57 703.57 711.57 717.56 720.56 724.56 728.56 735.56 744.55 750.55 754.55 757.55 760.55 763.54 765.54 766.54 768.54 770.54 772.54 774.54 775.54 777.54 780.54 781.54 782.54 784.54 787.54 790.53 796.53 798.53 800.53)) (quote (1.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 17.0 18.0 19.0 20.0 22.0 23.0 24.0 25.0 28.0 30.0 32.0 33.0 34.0 35.0 36.0 38.0 39.0 40.0 42.0 43.0 44.0 45.0 46.0 48.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 66.0 68.0 70.0 71.0 72.0 75.0 77.0 79.0 80.0 81.0 83.0 86.0 87.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 5.0 4.0 51.0 2.0 4.0 5.0 8.0 10.0 13.0 16.0 19.0 22.0 24.0 27.0 29.0 32.0 34.0 36.0 38.0 43.0 47.0 52.0 57.0 62.0 66.0 68.0 69.0 71.0 75.0 81.0 85.0 88.0 90.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 2.0 22.0 4.0 6.0 10.0 16.0 23.0 36.0 45.0 54.0 60.0 64.0 68.0 69.0 71.0 72.0 75.0 78.0 80.0 83.0 85.0 87.0 88.0 89.0 90.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 97.0 95.0 90.0 83.0 71.0 63.0 45.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 1020 615) nil (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t))) (list "All close" (list 0 nil) (list 1 nil))))) t nil nil nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 209 291) (om-make-point 78 91) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.99 6.44 11.27 15.41 18.86 21.62 24.38 27.14 29.9 32.67 34.74 36.81 37.5 38.19 39.57 40.26 40.95 43.02 45.09 51.3 54.75 58.2 63.03 69.25 74.77 79.6 87.19 92.02 96.16 99.62 103.76 106.52 107.9 108.59 109.28 110.66 111.35 113.42 114.8 116.87 120.32 123.08 127.22 132.06 136.2 142.41 150.0 154.83 160.35 167.26 172.78 179.68 186.58 193.48 197.63 201.77 203.84 204.53 205.22 205.91 207.98 210.05 214.19 216.26 220.4 225.23 229.37 234.9 238.35 242.49 246.63 254.22 264.58 275.62 286.66 291.49 295.63 299.09 301.85 305.3 307.37 311.51 315.65 321.17 328.07 337.05 345.33 353.61 360.51 368.8 376.39 388.12 400.55 405.38 408.83 410.9 413.66 414.35 415.04 415.73 417.8 419.18 420.56 422.63 425.39 429.54 432.3 435.06 439.2 443.34 446.79 450.93 455.07 457.83 460.59 463.36 464.74 466.81 468.19 471.64 475.78 481.3 485.44 490.27 494.41 497.87 502.01 507.53 512.36 517.19 522.02 528.24 531.0 533.76 537.9 539.28 540.66 543.42 545.49 548.25 549.63 551.01 554.46 557.22 561.37 566.89 573.1 577.93 582.76 587.59 591.73 594.5 598.64 603.47 606.23 609.68 613.13 617.27 621.41 624.17 626.93 630.39 631.08 632.46)) (quote (0.0 0.01 0.02 0.03 0.04 0.06 0.07 0.09 0.11 0.13 0.15 0.17 0.19 0.2 0.23 0.24 0.2 0.19 0.18 0.17 0.16 0.16 0.16 0.17 0.19 0.21 0.23 0.27 0.3 0.33 0.35 0.39 0.42 0.43 0.45 0.46 0.44 0.43 0.42 0.41 0.39 0.39 0.38 0.38 0.37 0.38 0.4 0.42 0.44 0.46 0.49 0.51 0.54 0.58 0.62 0.64 0.67 0.69 0.7 0.66 0.64 0.63 0.61 0.6 0.59 0.59 0.59 0.58 0.58 0.58 0.59 0.6 0.62 0.66 0.71 0.77 0.8 0.82 0.84 0.85 0.84 0.83 0.81 0.8 0.79 0.79 0.79 0.79 0.81 0.82 0.84 0.86 0.9 0.95 0.98 0.99 1.0 0.99 0.96 0.93 0.9 0.85 0.81 0.77 0.71 0.68 0.64 0.63 0.61 0.6 0.6 0.61 0.62 0.63 0.64 0.66 0.68 0.7 0.66 0.63 0.56 0.52 0.47 0.44 0.42 0.41 0.4 0.39 0.39 0.39 0.4 0.41 0.42 0.43 0.44 0.44 0.42 0.41 0.38 0.35 0.31 0.29 0.27 0.25 0.23 0.22 0.2 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.09 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 14 68) (om-make-point 983 711))) t nil nil nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 149 243) (om-make-point 34 30) 20 "20" nil) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 68 243) (om-make-point 69 30) "square" "\"square\"" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1121 163) (om-make-point 83 78) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (9 16 24 34 41 48 56 67 81 91 104 115 125 133 147 158 166 173 182 192 200 208 219 228 236 247 256 265 278 285 292 299 314 325 334 348 360 373 385 392 405 419 431 441 448 458 470 479 487 498 511 522 543 557 564 579 589 599 606 614 621 628 635 640 645 649 656 661 667 672 677 682 689 693 698 700 703 704 710 714 718 724 727 731 735 738 744 745 746 748 749 750 753 755 756 759 762 766 767 770 774 777 781 784 790 794 796 801 805 809 813 817 823 829 834 840 847 854 861 866 872 884 894 901 909 915 921 928 936 947 958 971 983 992 1001 1008 1026 1040 1053 1063 1077 1091 1105 1120 1137 1151 1170 1184 1197 1208 1217 1226 1240 1251 1261 1269 1279 1290 1300 1315 1322 1329 1337 1344 1353 1361 1368 1375 1383 1390 1397 1404 1411 1424 1435 1443 1452 1461 1468 1478 1485)) (quote (1 3 3 4 6 7 10 15 18 21 24 27 29 30 35 40 41 44 47 52 53 57 63 64 67 72 77 78 81 83 86 87 93 100 103 110 120 127 135 140 150 160 170 176 183 193 206 212 220 230 246 261 287 300 309 329 339 353 367 381 396 413 429 444 459 475 489 503 519 538 556 573 590 606 621 633 647 661 676 695 713 730 742 755 772 790 812 824 839 853 873 922 915 905 896 887 876 865 855 844 829 815 799 784 769 756 742 729 715 699 686 670 656 642 627 615 604 590 579 569 559 542 529 519 510 501 492 481 469 455 438 419 398 384 370 363 338 323 303 287 272 255 240 221 204 190 175 164 153 146 140 133 123 113 106 101 97 89 81 73 70 69 64 63 61 58 57 53 52 50 49 47 46 43 38 35 33 30 27 24 23)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1104 769))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1017 165) (om-make-point 83 77) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9 10.9 19.8 28.7 34.1 43.1 52.0 60.9 69.9 78.8 87.8 96.7 100.3 105.7 114.6 123.5 132.5 139.6 148.6 157.5 164.7 173.6 179.0 187.9 195.1 200.4 207.6 214.8 218.3 221.9 223.7 227.3 229.1 232.6 236.2 243.4 252.3 257.7 268.4 273.8 280.9 289.9 302.4 314.9 325.6 334.6 343.5 352.5 356.0 365.0 373.9 382.9 393.6 402.6 411.5 425.8 434.7 445.5 454.4 463.4 479.5 490.2 504.5 518.8 529.5 538.5 547.4 556.4 565.3 572.5 579.6 583.2 586.8 590.4 595.7 597.5 601.1 604.7 608.2 615.4 620.8 627.9 644.0 661.9 678.0 688.7 701.2 713.8 722.7 735.2 742.4 749.5 753.1 758.5 763.8 765.6 769.2 771.0 772.8 776.4 779.9 783.5 787.1 790.7 797.8 806.8 812.1 822.9 831.8 842.5 853.3 862.2 872.9 883.7 892.6 899.8 903.3 905.1 906.9 908.7 910.5 912.3 915.9 917.7 919.4 921.2 923.0 924.8 926.6 930.2 932.0 935.5 937.3 940.9 944.5 948.1 955.2 960.6 965.9 969.5 978.5 983.8)) (quote (0.0 0.2 0.3 0.4 0.6 0.7 0.9 1.0 1.2 1.3 1.5 1.6 1.7 1.9 2.1 2.3 2.4 2.6 2.7 2.9 3.1 3.4 3.8 4.1 4.4 4.6 5.0 5.3 5.6 5.9 6.2 6.5 6.7 6.9 7.1 7.4 7.7 7.9 8.3 8.5 8.8 9.1 9.4 9.5 9.6 9.6 9.6 9.4 9.2 9.1 8.9 8.8 8.7 8.7 8.7 9.0 9.2 9.4 9.5 9.8 10.1 10.2 10.3 10.5 10.7 10.7 10.7 10.5 10.3 10.0 9.7 9.5 9.2 8.9 8.7 8.5 8.0 7.5 7.1 6.8 6.4 6.1 5.7 5.4 5.3 5.3 5.5 5.8 6.0 6.3 6.6 6.9 7.2 7.5 7.9 8.1 8.4 8.8 9.0 9.2 9.5 9.7 9.9 10.2 10.5 10.7 10.9 11.2 11.3 11.5 11.5 11.5 11.4 11.1 10.9 10.6 10.4 10.1 9.8 9.3 8.3 7.7 7.3 5.1 4.6 4.2 3.9 3.7 3.4 3.2 2.9 2.6 2.4 2.1 1.8 1.5 1.2 0.9 0.7 0.5 0.3 0.1)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 102) (om-make-point 602 503))) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 859 325) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 806 303) (om-make-point 57 30) "Pitch" "\"Pitch\"" nil) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 18 27) (om-make-point 258 201) (load-buffer-textfile (quote ("//---------------------------------" "// A square wave oscillator" "//---------------------------------" "" "T = hslider(\"Period\",1,0.1,100.,0.1); // Period (ms)" "" "N = 44100./1000.*T:int; // The period in samples" "" "a = hslider(\"Cyclic ratio\",0.5,0,1,0.1); // Cyclic ratio" "" "i  = +(1)~%(N):-(1); // 0,1,2...,n" "" "square = _+(i,N*a : < : *(2) : -(1)) ;" "" "process = square,square;" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 485 4) (om-make-point 382 301) (load-buffer-textfile (quote ("declare name        \"pitch-shifter\";" "declare version     \"1.0\";" "declare author      \"Grame\";" "declare license     \"BSD\";" "declare copyright   \"(c) GRAME 2006\";" " //----------------------------" " // very simple real time pitch shifter" " //----------------------------" "import(\"music.lib\");" "" "transpose (w, x, s, sig)  =" "    fdelay1s(d,sig)*fmin(d/x,1) + fdelay1s(d+w,sig)*(1-fmin(d/x,1))" "        with {" "            i = 1 - pow(2, s/12);" "            d = i : (+ : +(w) : fmod(_,w)) ~ _;" "            };" "" "pitchshifter = vgroup(\"Pitch Shifter\", transpose(" "                                    hslider(\"window\", 1000, 50, 10000, 1)," "                                    hslider(\"xfade\", 10, 1, 10000, 1)," "                                    hslider(\"shift\", 0, -12, +12, 0.1)));" "" "process = pitchshifter,pitchshifter;" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "FAUST-FX" (quote faust-fx) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "effect-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "effect-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the effect will be plugged (0 = no specific track)" "tracknum" 0))) (om-make-point 715 355) (om-make-point 193 75) (when (find-class (quote faust-fx) nil) (let ((rep (make-instance (quote faust-fx)))) (setf (effect-txt rep) (load-buffer-textfile (quote ("declare name        \"pitch-shifter\";" "declare version     \"1.0\";" "declare author      \"Grame\";" "declare license     \"BSD\";" "declare copyright   \"(c) GRAME 2006\";" " //----------------------------" " // very simple real time pitch shifter" " //----------------------------" "import(\"music.lib\");" "" "transpose (w, x, s, sig)  =" "    fdelay1s(d,sig)*fmin(d/x,1) + fdelay1s(d+w,sig)*(1-fmin(d/x,1))" "        with {" "            i = 1 - pow(2, s/12);" "            d = i : (+ : +(w) : fmod(_,w)) ~ _;" "            };" "" "pitchshifter = vgroup(\"Pitch Shifter\", transpose(" "                                    hslider(\"window\", 1000, 50, 10000, 1)," "                                    hslider(\"xfade\", 10, 1, 10000, 1)," "                                    hslider(\"shift\", 0, -12, +12, 0.1)));" "" "process = pitchshifter,pitchshifter;" "" "")) (quote textfile) "supersede" "list") (effect-name rep) (quote "Pitch") (tracknum rep) (quote 1)) (push rep *faust-effects-to-compile*) rep)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 458 113) (om-make-point 124 318) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-editor-box1 "FAUST-SYNTH" (quote faust-synth) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "synth-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "synth-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the synth will be plugged (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a duration in seconds (default = 10 sec)" "duration" 10))) (om-make-point 4 280) (om-make-point 194 74) (let ((rep (make-instance (quote faust-synth)))) (setf (synth-txt rep) (load-buffer-textfile (quote ("//---------------------------------" "// A square wave oscillator" "//---------------------------------" "" "T = hslider(\"Period\",1,0.1,100.,0.1); // Period (ms)" "" "N = 44100./1000.*T:int; // The period in samples" "" "a = hslider(\"Cyclic ratio\",0.5,0,1,0.1); // Cyclic ratio" "" "i  = +(1)~%(N):-(1); // 0,1,2...,n" "" "square = _+(i,N*a : < : *(2) : -(1)) ;" "" "process = square,square;" "" "")) (quote textfile) "supersede" "list") (synth-name rep) (quote "square") (tracknum rep) (quote 2) (duration rep) (quote 20) (is-copy rep) (quote nil)) (push rep *faust-synths-to-compile*) rep) "x" nil (pairlis (quote (player scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list (quote :libaudiostream) nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 124 237) 0 1000 nil 1 (quote :libaudiostream) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (quote ((9 0 2 0 nil 0) (18 0 4 0 nil 0) (6 0 7 0 nil 0) (3 0 9 0 nil 0) (31 0 9 1 nil 0) (12 0 9 2 nil 0) (8 0 9 3 nil 0) (7 0 9 4 nil 0) (25 0 10 0 nil 0) (26 0 11 0 nil 0) (11 0 12 2 nil 0) (10 0 12 3 nil 0) (13 0 14 0 nil 0) (32 0 18 0 nil 0) (17 0 18 1 nil 0) (21 0 18 2 nil 0) (16 0 18 3 nil 0) (15 0 18 4 nil 0) (14 0 18 5 nil 0) (22 0 19 0 nil 0) (5 0 20 0 nil 0) (19 0 21 2 nil 0) (20 0 21 3 nil 0) (30 0 31 1 nil 0) (28 0 31 2 nil 0) (27 0 31 3 nil 0) (29 0 32 1 nil 0) (24 0 32 2 nil 0) (23 0 32 4 nil 0))) nil 6.080004))