; OM File Header - Saved 2013/11/19 15:49:58
; (6.070009 :patc (om-make-point 226 60) (om-make-point 797 62) (om-make-point 912 749) "" 183 0 nil "2013/11/19 15:49:58")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "1 - faust-fx" (quote ((om-load-boxcomment "comment 6" (om-make-point 302 119) (quote "IMPORTANT NOTE : $$- For this first OM-Faust release, Faust code (for both effects and synthesizers) must be Stereo$$- To see examples, go to :$http://faust.grame.fr/index.php/online-examples") "" (om-make-point 0 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 384 572) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 5" (om-make-point 224 75) (quote "Double click on the Faust-FX box to see and use the graphic user interface window. $You can also look at the SVG file.") "" (om-make-point 363 402) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 224 75) (quote "A track number to plug the effect $(optional : you can plug and unplug faust objects in the audio mixer)") "" (om-make-point 628 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 332 609) (om-make-point 126 55) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 743 325) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcomment "comment 3" (om-make-point 254 85) (quote "Try to load a sound, set it's track to 1 and hear it going through the Wah-Wah effect. $Also try to change the FX parameters values in real-time.") "" (om-make-point 462 606) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 601 207) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 2" (om-make-point 197 53) (quote "A Textfile containing your Faust code ") "" (om-make-point 107 94) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 253 76) (quote "A name $(optional : if you don't fill this slot, a default name like faust-fx-X will be set)") "" (om-make-point 425 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 435 151) (om-make-point 85 30) "Wah-Wah" "\"Wah-Wah\"" nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 112 129) (om-make-point 249 103) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = crybaby_demo,crybaby_demo;" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t) (om-load-editor-box1 "FAUST-FX" (quote faust-fx) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "effect-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "effect-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the effect will be plugged (0 = no specific track)" "tracknum" 0))) (om-make-point 367 324) (om-make-point 181 78) (when (find-class (quote faust-fx) nil) (let ((rep (make-instance (quote faust-fx)))) (setf (effect-txt rep) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = crybaby_demo,crybaby_demo;" "" "" "" "" "" "")) (quote textfile) "supersede" "list") (effect-name rep) (quote "Wah-Wah") (tracknum rep) (quote 1)) (push rep *faust-effects-to-compile*) rep)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1320 344) (om-make-point 204 156) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t))) (quote ((1 0 4 1 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (6 0 11 3 nil 0))) nil 6.070009))