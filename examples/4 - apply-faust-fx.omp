; OM File Header - Saved 2013/11/18 15:56:22
; (6.070006 :patc (om-make-point 172 110) (om-make-point 863 236) (om-make-point 1006 914) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Faust")))(setf *om-current-persistent* (om-load-patch1 "4 - apply-faust-fx" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 688 295) (om-make-point 103 30) "faust-out.aiff" "\"faust-out.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "faust-out.aiff"))) (om-make-point 673 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "APPLY-FAUST-FX" (quote apply-faust-fx) (quote ((om-load-inputfun (quote input-funbox) "A sound object" "S" nil) (om-load-inputfun (quote input-funbox) "A Faust-Fx" "EFFECT" nil) (om-load-inputkeyword (quote input-keyword) "A gain factor between 0 and 1" "gain" (quote :gain) 1.0 nil) (om-load-inputkeyword (quote input-keyword) "A list of values, to set the Faust-Fx parameters values" "settings" (quote :settings) nil nil) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-fx-out" nil) (om-load-inputkeyword (quote input-keyword) "An output format (wav, aif or aiff)" "format" (quote :format) (quote (quote aiff)) nil))) (om-make-point 572 642) nil nil nil nil 1) (om-load-boxcall (quote genfun) "APPLY-FAUST-FX 3" (quote apply-faust-fx) (quote ((om-load-inputfun (quote input-funbox) "A sound object" "S" nil) (om-load-inputfun (quote input-funbox) "A Faust-Fx" "EFFECT" nil) (om-load-inputkeyword (quote input-keyword) "A filename" "filename" (quote :filename) "faust-fx-out" nil))) (om-make-point 476 328) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 357 229) (quote "As you can see here, you can add slots to this methods :$$- Gain : make-up gain between 0db and 1db. ometimes your effects will introduce amplification, and may cause sound clipping,$- Settings : a list of values to apply to the FX parameters (in the same order as displayed in the FX graphic user interface),$- Filename : a pathname, if you already know where you want to save the result,$- Format : aif, aiff or wav.") "" (om-make-point 157 603) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 251 71) (quote "1) Load a sound by evaluating this sound box, then lock the box (press B).") "" (om-make-point 45 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 248 88) (quote "2) Evaluate this empty sound box : it will ask you for a path to save the result of the apply-faust-fx method. Then, hear the result.") "" (om-make-point 237 459) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 277 192) (om-make-point 191 78) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 472 456) (om-make-point 186 90) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudiostream) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 726 85) (quote "The apply-faust-fx method allows you to apply a Faust-FX on a sound, and save it as a new file.") "" (om-make-point 139 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "FAUST-FX" (quote faust-fx) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a textfile written in Faust language" "effect-txt" nil) (om-load-inputfun (quote input-funbox) "a name" "effect-name" nil) (om-load-inputfun (quote input-funbox) "a track on which the effect will be plugged (0 = no specific track)" "tracknum" 0))) (om-make-point 579 188) (om-make-point 206 79) (when (find-class (quote faust-fx) nil) (let ((rep (make-instance (quote faust-fx)))) (setf (effect-txt rep) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = flanger_demo;" "" "" "" "")) (quote textfile) "supersede" "list") (effect-name rep) (quote "Faust-FX-1") (tracknum rep) (quote 0)) (push rep *faust-effects-to-compile*) rep)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 372 399) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 627 56) (om-make-point 180 80) (load-buffer-textfile (quote ("import(\"effect.lib\");" "" "process = flanger_demo;" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (quote ((0 0 1 0 nil 0) (7 0 3 0 nil 0) (10 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 8 0 nil 0) (11 0 10 1 nil 0))) nil 6.070006))
